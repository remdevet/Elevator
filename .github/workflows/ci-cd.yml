name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'ElevatorSystem.sln'

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet-version: ['8.0.x']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache .NET build artifacts
      uses: actions/cache@v3
      with:
        path: |
          **/bin/
          **/obj/
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --verbosity normal --configuration Release --logger "console;verbosity=detailed"
      
    - name: Generate test results
      if: always()
      run: |
        echo "## Test Results for ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS:** ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **.NET Version:** ${{ matrix.dotnet-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration:** Release" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Run code analysis
      run: |
        dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --verbosity quiet
        echo "Code analysis completed successfully"
        
    - name: Check for build warnings
      run: |
        dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --verbosity normal | grep -i "warning\|error" || echo "No warnings or errors found"
        
  summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: always()
    
    steps:
    - name: Workflow Summary
      run: |
        echo "## ðŸš€ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… Completed Jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- Build and Test (Multiple OS)" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
